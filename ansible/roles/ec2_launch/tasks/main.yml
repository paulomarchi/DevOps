- name: Create a Basic VPC
  ec2_vpc:
    state: present
    cidr_block: 172.23.0.0/16
    resource_tags: { "Name": "{{ project_name }}" }
    subnets:
      - cidr: 172.23.1.0/24
        az: "{{ aws_region_zone_c }}"
        resource_tags: { "Name": "{{ project_name }}-ZONE-C" }
      - cidr: 172.23.2.0/24
        az: "{{ aws_region_zone_b }}"
        resource_tags: { "Name": "{{ project_name }}-ZONE-B" }
      - cidr: 172.23.3.0/24
        az: "{{ aws_region_zone_a }}"
        resource_tags: { "Name": "{{ project_name }}-ZONE-A" }
    internet_gateway: True
    route_tables:
      - subnets:
          - 172.23.2.0/24
          - 172.23.3.0/24
        routes:
          - dest: 0.0.0.0/0
            gw: igw
      - subnets:
          - 172.23.1.0/24
        routes:
          - dest: 0.0.0.0/0
            gw: igw
    region: "{{ aws_region }}"
  register: vpc_create

- name: Create Security Group
  ec2_group:
    name: "{{ project_name }}_security_group"
    description: "{{ project_name }} security group"
    region: "{{ aws_region }}"
    vpc_id: "{{ vpc_create.vpc_id }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: basic_firewall

- name: Create an EC2 key
  ec2_key:
    name: "{{ project_name }}-{{ env }}-key"
    region: "{{ aws_region }}"
  register: ec2_key

- name: Save Private Key
  copy: content="{{ ec2_key.key.private_key }}" dest="./.aws-{{ env }}-private.pem" mode=0600
  when: ec2_key.changed
  register: save_private_key

- name: Print save private key
  debug:
    msg: "{{ save_private_key }}"

# - name: Set up Authorized Keys
#   authorized_key:
#     user: "{{ user }}"
#     key: "{{ save_private_key.dest }}"

- name: Create an EC2 Instance
  ec2:
    key_name: "{{ project_name }}-{{ env }}-key"
    region: "{{ aws_region }}"
    group_id: "{{ basic_firewall.group_id }}"
    instance_type: "{{ instance_type }}"
    image: "{{ ami }}"
    volumes:
      - device_name: /dev/xvda
        volume_type: gp2
        volume_size: 100
        delete_on_termination: true
    wait: true
    instance_tags:
        Name: "{{ project_name }}-{{ env }}"
        env: "{{ env }}"
    count_tag: env
    vpc_subnet_id: "{{ vpc_create.subnets.0.id }}"
    assign_public_ip: yes
    exact_count: 1
  register: ec2

- name: Add new instances to host group
  add_host:
    hostname: "{{ item.public_ip }}"
    groups: launched
    ansible_host: "{{ item.public_ip }}"
    ansible_ssh_host: "{{ item.public_ip }}"
    ansible_user: "{{ user }}"
    ansible_ssh_user: "{{ user }}"
    ansible_ssh_private_key_file: "{{ save_private_key.dest }}"
  with_items: "{{ ec2.instances }}"

- name: Wait for instance to boot
  wait_for:
    host: "{{ item.public_ip }}"
    port: 22
    delay: 30
    timeout: 300
    state: started
  with_items: "{{ ec2.instances }}"

- name: Get WorkDir
  set_fact:
    work_dir: "{{ lookup('env', 'PWD') }}"

- name: Generate SSH Config
  template:
    src: 'ssh_config.j2'
    dest: "{{ work_dir }}/ssh.config"
  with_items: "{{ ec2.instances }}"
